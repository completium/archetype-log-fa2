archetype wrapper_fa2(
  owner : address,
  fa2 : address,
  bridge_wallet : address
)

/* OWNERSHIP TRANSFER ------------------------------------------------------ */

variable owner_candidate : option<address> = none

entry declare_ownership(candidate : address) {
  called by owner
  effect {
    owner_candidate := some(candidate);
  }
}

entry claim_ownership() {
  require {
    ownership_r1: (owner_candidate ? the = caller : false) otherwise "INVALID_CALLER"
  }
  effect {
    owner := caller;
    owner_candidate := none
  }
}

/* METADATA ---------------------------------------------------------------- */

entry set_metadata(k: string, d : option<bytes>) {
  called by owner
  effect {
    metadata.update(k, d)
  }
}

/* SETTERS ----------------------------------------------------------------- */

entry set_fa2(v : address) {
  called by owner
  effect {
    fa2 := v
  }
}

entry set_bridge_wallet(v : address) {
  called by owner
  effect {
    bridge_wallet := v
  }
}

/* EVENTS ------------------------------------------------------------------ */

event has_been_sent {
  sender : address;
  recipient : address;
  target : string;
  amount : nat;
  contract_address : address;
}

/* ENTRYPOINTS ------------------------------------------------------------- */

entry log_send_memo(iamount : nat, itarget : string) {
  transfer 0tz to fa2 call %transfer<list<address * list<address * nat * nat>>> (([(caller, [(bridge_wallet, 0, iamount)])]));
  emit<has_been_sent>({sender = caller; recipient = bridge_wallet; target = itarget; amount = iamount; contract_address = fa2})
}
